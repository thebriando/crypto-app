{"version":3,"sources":["BitcoinPrices/BitcoinPrices.js","Navbar/Navbar.js","Footer/Footer.js","App.js","serviceWorker.js","index.js"],"names":["Plot","createPlotlyComponent","Plotly","BitcoinPrices","props","componentDidMount","a","async","getCurrentPrice","getPricesFromDates","formatDateString","state","beginDate","endDate","getResponseJSON","url","fetch","response","json","currentPrice","bpi","USD","rate","setState","startDate","loading","progress","Object","entries","date","price","prices","getFullYear","getMonth","getDate","handleDateChange","type","error","Date","beginDateStr","endDateStr","currentDate","prevDate","setMonth","this","className","Container","utils","DateFnsUtils","DatePicker","label","value","onChange","Snackbar","anchorOrigin","vertical","horizontal","open","message","LinearProgress","key","Table","aria-label","TableHead","TableRow","TableCell","TableBody","map","row","data","x","y","mode","marker","color","useResizeHandler","style","width","height","layout","autosize","title","Component","Navbar","Toolbar","Typography","variant","noWrap","Footer","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2d8469f6.chunk.js","sourcesContent":["import DateFnsUtils from \"@date-io/date-fns\";\nimport {\n  Container,\n  LinearProgress,\n  Snackbar,\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableRow\n} from \"@material-ui/core\";\nimport { DatePicker, MuiPickersUtilsProvider } from \"@material-ui/pickers\";\nimport Plotly from \"plotly.js-basic-dist\";\nimport React, { Component } from \"react\";\nimport createPlotlyComponent from \"react-plotly.js/factory\";\nimport \"./BitcoinPrices.scss\";\nconst Plot = createPlotlyComponent(Plotly);\n\nexport class BitcoinPrices extends Component {\n  constructor(props) {\n    super(props);\n    // gets currentDate, and one month before current date\n    const currentDate = new Date();\n    const prevDate = new Date();\n    prevDate.setMonth(currentDate.getMonth() - 1);\n    this.state = {\n      currentPrice: \"\",\n      prices: [],\n      beginDate: prevDate,\n      endDate: currentDate,\n      loading: false,\n      error: \"\"\n    };\n  }\n  // when component mounts, current BTC price is retrieved\n  // prices from the previous month until the current date are also retrieved\n  componentDidMount = async () => {\n    this.getCurrentPrice();\n    this.getPricesFromDates(this.formatDateString(this.state.beginDate), this.formatDateString(this.state.endDate));\n  };\n  // returns a JSON object from a GET request\n  // @param {string} url => a url to make an HTTP request to\n  getResponseJSON = async url => {\n    const response = await fetch(url);\n    return response.json();\n  };\n  // retrieves the current BTC price from coindesk API\n  getCurrentPrice = async () => {\n    const response = await this.getResponseJSON(\"https://api.coindesk.com/v1/bpi/currentprice.json\");\n    const currentPrice = response.bpi.USD.rate;\n    this.setState({ currentPrice: currentPrice });\n  };\n  // retrieves an array of average BTC prices everyday from the startDate to the endDate\n  // @param {string} startDate => starting date to use as a query in the request\n  // @param {string} endDate => end date to use as a query in the request\n  getPricesFromDates = async (startDate, endDate) => {\n    this.setState({ loading: true, progress: 0 });\n    const response = await this.getResponseJSON(\n      `https://api.coindesk.com/v1/bpi/historical/close.json?start=${startDate}&end=${endDate}`\n    );\n    for (const [date, price] of Object.entries(response.bpi)) {\n      this.setState({ prices: [...this.state.prices, { date: date, price: price }] });\n    }\n    this.setState({ loading: false });\n  };\n  // formats a JS Date object into a readable string to insert into the API queries\n  // @param {Date} date => a Date object to parse\n  // returns a string in this format: \"YYYY/MM/DD\"\n  formatDateString = date => {\n    return `${date.getFullYear()}-${date.getMonth() + 1 < 10 ? `0${date.getMonth() + 1}` : date.getMonth() + 1}-${\n      date.getDate() < 10 ? `0${date.getDate()}` : date.getDate()\n    }`;\n  };\n  // changes the date in the state when a user interacts with the date pickers\n  // @param {Date} date => the date to update in the state\n  // @param {string} type => either \"beginDate\" or \"endDate\", refers to the type of date to\n  // manipulate in the state\n  // function exits and sets an error if beginDate > endDate or if endDate < beginDate || current date\n  handleDateChange = (date, type) => {\n    this.setState({ error: \"\" });\n    if (type === \"beginDate\" && date > this.state.endDate) {\n      this.setState({ error: \"Begin date cannot be greater than end date\" });\n      return;\n    }\n    if (type === \"endDate\") {\n      if (date < this.state.beginDate) {\n        this.setState({ error: \"End date cannot be greater than begin date\" });\n        return;\n      }\n      const currentDate = new Date();\n      if (date > currentDate) {\n        this.setState({ error: \"End date cannot be greater than current date\" });\n        return;\n      }\n    }\n    this.setState({ [type]: date }, () => {\n      this.setState({ prices: [] });\n      const beginDateStr = this.formatDateString(this.state.beginDate);\n      const endDateStr = this.formatDateString(this.state.endDate);\n      this.getPricesFromDates(beginDateStr, endDateStr);\n    });\n  };\n  render() {\n    const { currentPrice, prices, beginDate, endDate, loading, error } = this.state;\n    return (\n      <div className=\"bitcoin_prices\">\n        <Container>\n          <h1>Current Bitcoin Price: {currentPrice} USD</h1>\n          <div className=\"date-pickers\">\n            <h2 className=\"date-pickers-header\">View Daily Bitcoin Prices</h2>\n            <div className=\"date-picker begin-date\">\n              <MuiPickersUtilsProvider utils={DateFnsUtils}>\n                <DatePicker\n                  label=\"Begin Date\"\n                  value={beginDate}\n                  onChange={date => this.handleDateChange(date, \"beginDate\")}\n                />\n              </MuiPickersUtilsProvider>\n            </div>\n            <div className=\"date-picker end-date\">\n              <MuiPickersUtilsProvider utils={DateFnsUtils}>\n                <DatePicker\n                  label=\"End Date\"\n                  value={endDate}\n                  onChange={date => this.handleDateChange(date, \"endDate\")}\n                />\n              </MuiPickersUtilsProvider>\n            </div>\n          </div>\n          <Snackbar anchorOrigin={{ vertical: \"top\", horizontal: \"center\" }} open={error !== \"\"} message={error} />\n          {loading ? (\n            <LinearProgress />\n          ) : (\n            !error && (\n              <div key=\"not-loading\">\n                <Table aria-label=\"bitcoin table\">\n                  <TableHead>\n                    <TableRow>\n                      <TableCell>Date</TableCell>\n                      <TableCell>Bitcoin Price (USD)</TableCell>\n                    </TableRow>\n                  </TableHead>\n                  <TableBody>\n                    {prices.map(row => (\n                      <TableRow key={`${row.date}/${row.price}`}>\n                        <TableCell>{row.date}</TableCell>\n                        <TableCell>{row.price}</TableCell>\n                      </TableRow>\n                    ))}\n                  </TableBody>\n                </Table>\n                <Plot\n                  data={[\n                    {\n                      x: prices.map(row => row.date),\n                      y: prices.map(row => row.price),\n                      type: \"scatter\",\n                      mode: \"lines\",\n                      marker: { color: \"blue\" }\n                    }\n                  ]}\n                  useResizeHandler\n                  style={{ width: \"100%\", height: \"100%\" }}\n                  layout={{\n                    autosize: true,\n                    title: `Bitcoin Prices from ${this.formatDateString(beginDate)} to ${this.formatDateString(\n                      endDate\n                    )}`\n                  }}\n                />\n              </div>\n            )\n          )}\n        </Container>\n      </div>\n    );\n  }\n}\n","import { Toolbar, Typography } from \"@material-ui/core\";\nimport React from \"react\";\nexport const Navbar = () => {\n    return (\n      <div>\n        <Toolbar>\n          <Typography variant=\"h6\" noWrap>\n            Bitcoin Price Tracker\n          </Typography>\n        </Toolbar>\n      </div>\n    );\n}\n","import { Toolbar } from \"@material-ui/core\";\nimport React from \"react\";\nimport \"./Footer.scss\";\n\nexport const Footer = () => {\n  return (\n    <div className=\"footer\">\n      <Toolbar>\n        <span className=\"footer-text\">\n          This data was produced from the CoinDesk Bitcoin Price Index. Non-USD currency data converted using hourly\n          conversion rate from openexchangerates.org\n        </span>\n      </Toolbar>\n    </div>\n  );\n};\n","import React from \"react\";\nimport \"./App.scss\";\nimport { BitcoinPrices } from \"./BitcoinPrices/BitcoinPrices\";\nimport { Navbar } from \"./Navbar/Navbar\";\nimport { Footer } from \"./Footer/Footer\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Navbar />\n      <BitcoinPrices />\n      <Footer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}